<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
	"-//Puppy Crawl//DTD Check Configuration 1.3//EN"
	"http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
	<property name="severity" value="error" />

	<!--
		If you set the basedir property below, then all reported file names
		will be relative to the specified directory. See http://checkstyle.sourceforge.net/5.x/config.html#Checker

	<property name="basedir" value="${basedir}" />
	<property name="localeCountry" value="" /> JVM locale country
	<property name="localeLanguage" value="" /> JVM locale language
	<property name="charset" value="" /> JVM file.encoding property
	-->

	<!-- http://checkstyle.sourceforge.net/config_filters.html#SuppressionFilter -->
	<module name="SuppressionFilter">
		<property name="file" value="${config_loc}/suppressions.xml" />
	</module>

	<!-- See http://checkstyle.sf.net/config_sizes.html -->
	<!-- Checks for long lines. -->
	<module name="LineLength">
		<property name="severity" value="info" />
		<property name="ignorePattern" value="^$" />
		<property name="max" value="165" />
	</module>


	<!--
	 !________________________________________________________________________________________
	 !
	 !		H E A D E R S
	 !________________________________________________________________________________________
	 !-->

	<!-- Checks the header of a source file against a header file that contains a regular expression -->
	<!-- for each line of the source header. -->
	<!-- See http://checkstyle.sf.net/config_header.html -->
	<module name="RegexpHeader">
		<property name="headerFile" value="${config_loc}/header.txt" />
		<property name="charset" value="UTF-8" />
		<property name="fileExtensions" value="java,xtend" />
	</module>

	<!--
	 !________________________________________________________________________________________
	 !
	 !		J A V A D O C S
	 !________________________________________________________________________________________
	 !-->
	<module name="JavadocPackage">
		<property name="severity" value="info" />
		<property name="allowLegacy" value="false" />
	</module>

	<!--
	 !________________________________________________________________________________________
	 !
	 !		M I S C E L L A N E O U S
	 !________________________________________________________________________________________
	 !-->

	<!-- Checks whether files end with a new line. -->
	<!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
	<module name="NewlineAtEndOfFile">
		<property name="lineSeparator" value="system" />
		<property name="fileExtensions" value="*.*" />
	</module>

	<!-- Checks that property files contain the same keys. -->
	<!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
	<module name="Translation">
		<property name="fileExtensions" value="properties" />
	</module>

	<!--
	 !________________________________________________________________________________________ 
	 !
	 !		S I Z E V I O L A T I O N S
	 !________________________________________________________________________________________ 
	 !-->

	<!-- Checks for long source files. -->
	<!-- See http://checkstyle.sf.net/config_sizes.html -->
	<module name="FileLength">
		<property name="max" value="2000" />
		<property name="fileExtensions" value="java" />
	</module>


	<!--
	 !________________________________________________________________________________________
	 !
	 !		W H I T E S P A C E
	 !________________________________________________________________________________________
	 !-->

	<module name="TreeWalker">
		<property name="tabWidth" value="4" />

		<module name="SuppressWithNearbyCommentFilter">
			<property name="commentFormat" value="NOCS" />
			<property name="checkFormat" value=".*" />
			<property name="influenceFormat" value="0" />
		</module>


		<!--
		 !________________________________________________________________________________________
		 !
		 !		A N N O T A T I O N S
		 !________________________________________________________________________________________
		 !-->

		<!-- This check controls the usage style of annotations. -->
		<!-- See http://checkstyle.sourceforge.net/config_annotation.html#AnnotationUseStyle -->
		<module name="AnnotationUseStyle">
			<property name="elementStyle" value="compact_no_array" />
			<property name="closingParens" value="never" />
			<property name="trailingArrayComma" value="never" />
		</module>

		<!-- Verifies that both the java.lang.Deprecated import is present and
			the @deprecated Javadoc tag is present when either is present. -->
		<!-- See http://checkstyle.sourceforge.net/config_annotation.html#MissingDeprecated -->

		<module name="MissingDeprecated">
			<property name="severity" value="info" />
		</module>

		<!-- Verifies that the java.lang.Override annotation is present when the {@inheritDoc} javadoc tag is present. -->
		<!-- See http://checkstyle.sourceforge.net/config_annotation.html#MissingOverride -->
		<module name="MissingOverride">
			<property name="javaFiveCompatibility" value="false" />
		</module>

		<!-- This check makes sure that all package annotations are in the package-info.java file. -->
		<!-- See http://checkstyle.sourceforge.net/config_annotation.html#PackageAnnotation -->
		<module name="PackageAnnotation" />

		<!-- This check allows you to specify what warnings that SuppressWarnings is not allowed to suppress. -->
		<!-- You can also specify a list of TokenTypes that the configured warning(s) cannot be suppressed on. -->
		<!-- See http://checkstyle.sourceforge.net/config_annotation.html#SuppressWarnings -->
		<module name="SuppressWarnings">
			<property name="format" value="^$|^\s+$" />
			<property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF,
				ANNOTATION_FIELD_DEF, ENUM_CONSTANT_DEF, PARAMETER_DEF,
				VARIABLE_DEF, METHOD_DEF, CTOR_DEF" />
		</module>


		<!--
			!________________________________________________________________________________________
			!
			!		B L O C K S
			!________________________________________________________________________________________
			-->
		<!-- Finds nested blocks, i.e. blocks that are used freely in the code. -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		<!-- KIEKER allowInSwitchCase -->
		<module name="AvoidNestedBlocks">
			<property name="allowInSwitchCase" value="true" />
		</module>

		<!-- Checks for empty blocks. -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		<module name="EmptyBlock">
		</module>

		<!-- Checks for the placement of left curly braces ('{') for code blocks. -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		<module name="LeftCurly">
			<property name="option" value="eol" />
			<property name="tokens" value="CLASS_DEF, CTOR_DEF,
						INTERFACE_DEF, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
						LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH,
						LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE,
						METHOD_DEF" />
		</module>

		<!-- Checks for braces around code blocks. -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		<module name="NeedBraces">
			<property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_IF, LITERAL_FOR, LITERAL_WHILE" />
		</module>

		<!-- Checks the placement of right curly braces ('}') for else, try, and catch tokens. -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		<module name="RightCurly">
			<property name="option" value="same" />
			<property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE" />
		</module>


		<!--
			!________________________________________________________________________________________
			!
			!		C L A S S   D E S I G N
			!________________________________________________________________________________________
			-->


		<!-- Checks that a class which has only private constructors is declared as final. -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		<module name="FinalClass" />

		<!-- Make sure that utility classes (classes that contain only static methods) do not have a public constructor. -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		<module name="HideUtilityClassConstructor" />

		<!-- Check nested (internal) classes/interfaces are declared at the bottom of the class after all method and field declarations. -->
		<!-- See http://checkstyle.sourceforge.net/config_design.html#InnerTypeLast -->
		<module name="InnerTypeLast" />

		<!-- Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types. -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		<module name="InterfaceIsType">
			<property name="allowMarkerInterfaces" value="true" />
		</module>

		<!-- Ensures that exceptions (defined as any class name conforming to some regular expression) are immutable. -->
		<!-- That is, have only final fields. -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		<module name="MutableException">
			<property name="format" value="^.*Exception$|^.*Error$" />
		</module>

		<!-- Checks visibility of class members. -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		<module name="VisibilityModifier">
			<property name="packageAllowed" value="false" />
			<property name="protectedAllowed" value="true" />
			<property name="publicMemberPattern" value="^serialVersionUID$" />
		</module>


		<!--
			!________________________________________________________________________________________
			!
			!		C O D I N G
			!________________________________________________________________________________________
			-->
		<!-- Checks that array initialization contains a trailing comma. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="ArrayTrailingComma" />

		<!-- Checks that classes that define a covariant equals() method also override method equals(java.lang.Object). -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="CovariantEquals" />

		<!-- Checks declaration order according to Code Conventions for the Java Programming Language. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="DeclarationOrder">
			<property name="ignoreConstructors" value="false" />
			<property name="ignoreModifiers" value="false" />
		</module>

		<!-- Check that the default is after all the cases in a switch statement. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="DefaultComesLast" />

		<!-- Detects empty statements (standalone ;). -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="EmptyStatement" />

		<!-- Checks that any combination of String literals with optional assignment is on the left side of an equals() comparison. -->
		<!-- See http://checkstyle.sourceforge.net/config_coding.html#EqualsAvoidNull -->
		<module name="EqualsAvoidNull" />

		<!-- Checks that classes that override equals() also override hashCode(). -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="EqualsHashCode" />

		<!-- Checks for fall through in switch statements Finds locations where a case contains Java code ... -->
		<!-- but lacks a break, return, throw or continue statement. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="FallThrough">
			<property name="checkLastCaseGroup" value="false" />
			<property name="reliefPattern" value="fallthru|falls??through" />
		</module>

		<!-- Checks that local variables that never have their values changed are declared final. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="FinalLocalVariable">
			<property name="tokens" value="VARIABLE_DEF" />
		</module>

		<!-- Checks that a local variable or a parameter does not shadow a field that is defined in the same class. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<!-- KIEKER ignoreConstructorParameter, ignoreSetter -->
		<module name="HiddenField">
			<property name="tokens" value="PARAMETER_DEF, VARIABLE_DEF" />
			<property name="ignoreConstructorParameter" value="true" />
			<property name="ignoreSetter" value="true" />
			<property name="ignoreAbstractMethods" value="false" />
		</module>

		<!-- Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException is almost never acceptable. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="IllegalCatch">
			<property name="illegalClassNames" value="java.lang.Exception, java.lang.Throwable, java.lang.RuntimeException" />
		</module>

		<!-- Checks for illegal instantiations where a factory method is preferred. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<!-- KIEKER on for ??? -->
		<module name="IllegalInstantiation">
			<property name="classes" value="java.lang.Boolean" />
		</module>

		<!-- This check can be used to ensure that types are not declared to be thrown. -->
		<!-- Declaring to throw java.lang.Error or java.lang.RuntimeException is almost never acceptable. -->
		<!-- See http://checkstyle.sourceforge.net/config_coding.html#IllegalThrows -->
		<module name="IllegalThrows">
			<property name="illegalClassNames" value="java.lang.Throwable, java.lang.Error, java.lang.RuntimeException" />
		</module>

		<!-- Checks that particular classes are never used as types in variable declarations, return values or parameters. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<!-- KIEKER removed format value="^(.*[\\.])?Abstract.*$" -->
		<module name="IllegalType">
			<property name="tokens" value="PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF" />
			<property name="illegalClassNames" value="java.util.GregorianCalendar, java.util.Hashtable,
					java.util.HashSet, java.util.HashMap, java.util.ArrayList,
					java.util.LinkedList, java.util.LinkedHashMap,
					java.util.LinkedHashSet, java.util.TreeSet,
					java.util.TreeMap, java.util.Vector" />
			<property name="legalAbstractClassNames" value="" />
			<property name="ignoredMethodNames" value="getInitialContext, getEnvironment" />
		</module>

		<!-- Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="InnerAssignment">
			<property name="tokens" value="ASSIGN, BAND_ASSIGN, BOR_ASSIGN, BSR_ASSIGN, BXOR_ASSIGN,
					DIV_ASSIGN, MINUS_ASSIGN, MOD_ASSIGN, PLUS_ASSIGN, SL_ASSIGN,
					SR_ASSIGN, STAR_ASSIGN" />
		</module>

		<!-- Checks that switch statement has "default" clause. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="MissingSwitchDefault" />

		<!-- Check for ensuring that for loop control variables are not modified inside the for block. -->
		<!-- See http://checkstyle.sourceforge.net/config_coding.html#ModifiedControlVariable -->
		<module name="ModifiedControlVariable" />

		<!-- Checks that each variable declaration is in its own statement and on its own line. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="MultipleVariableDeclarations" />

		<!-- Restricts nested for blocks to a specified depth. -->
		<!-- See http://checkstyle.sourceforge.net/config_coding.html#NestedForDepth -->
		<module name="NestedForDepth">
			<property name="max" value="2" />
		</module>

		<!-- Restricts nested if-else blocks to a specified depth. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="NestedIfDepth">
			<property name="max" value="3" />
		</module>

		<!-- Restricts nested try-catch blocks to a specified depth. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="NestedTryDepth">
			<property name="max" value="1" />
		</module>

		<!-- Checks that the clone method is not overridden from the Object class. -->
		<!-- See http://checkstyle.sourceforge.net/config_coding.html#NoClone -->
		<module name="NoClone" />

		<!-- Verifies there are no finalize() methods defined in a class. -->
		<!-- See http://checkstyle.sourceforge.net/config_coding.html#NoFinalizer -->
		<module name="NoFinalizer" />

		<!-- Checks there is only one statement per line. -->
		<!-- See http://checkstyle.sourceforge.net/config_coding.html#OneStatementPerLine -->
		<module name="OneStatementPerLine" />

		<!-- Ensure a class has a package declaration. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="PackageDeclaration">
		</module>

		<!-- Disallow assignment of parameters. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="ParameterAssignment" />

		<!-- Checks that code doesn't rely on the "this." default. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="RequireThis">
			<property name="checkFields" value="true" />
			<property name="checkMethods" value="true" />
		</module>

		<!-- Restrict the number of return statements. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="ReturnCount">
			<property name="max" value="2" />
			<property name="format" value="" />
		</module>

		<!-- Checks for overly complicated boolean expressions. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="SimplifyBooleanExpression" />

		<!-- Checks for overly complicated boolean return statements. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="SimplifyBooleanReturn" />

		<!-- Checks that string literals are not used with == or !=. -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="StringLiteralEquality" />

		<!-- Checks that an overriding clone() method invokes super.clone(). -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="SuperClone" />

		<!-- Checks that an overriding finalize() method invokes super.finalize(). -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<module name="SuperFinalize" />



		<!--
			!________________________________________________________________________________________
			!
			!		I M P O R T S
			!________________________________________________________________________________________
			-->
		<!-- Checks that there are no import statements that use the * notation. -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		<module name="AvoidStarImport">
			<property name="excludes" value="java.lang.Math,org.junit.Assert,org.hamcrest.MatcherAssert,org.hamcrest.Matchers" />
			<property name="allowClassImports" value="false" />
			<property name="allowStaticMemberImports" value="false" />
		</module>

		<!-- Checks that there are no static import statements. -->
		<!-- See http://checkstyle.sourceforge.net/config_imports.html#AvoidStaticImport -->
		<module name="AvoidStaticImport">
			<property name="excludes" value="java.lang.Math.*,org.junit.Assert.*,org.hamcrest.MatcherAssert.*,org.hamcrest.Matchers.*" />
		</module>

		<!-- Checks for imports from a set of illegal packages. -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		<module name="IllegalImport">
			<property name="illegalPkgs" value="junit.framework" />
			<property name="illegalPkgs" value="sun" />
			<property name="illegalPkgs" value="org.apache.commons.logging" />
			<property name="illegalPkgs" value="java.util.logging" />
		</module>

		<!-- Checks the ordering/grouping of imports. -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		<module name="ImportOrder">
			<property name="option" value="top" />
			<property name="groups" value="java,javax,junit,org,com,ch,de,kieker,org.spp" />
			<property name="ordered" value="true" />
			<property name="separated" value="true" />
			<property name="caseSensitive" value="true" />
		</module>

		<!-- Checks for redundant import statements. -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		<module name="RedundantImport" />

		<!-- Checks for unused import statements. -->
		<!-- See http://checkstyle.sf.net/config_import.html -->
		<module name="UnusedImports" />


		<!--
			!________________________________________________________________________________________
			!
			!		J A V A D O C S
			!________________________________________________________________________________________
			-->
		<!-- Checks to ensure that the javadoc tags exist (if required) -->
		<!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocMethod -->
		<!-- KIEKER: adapted -->
		<module name="JavadocMethod">
			<property name="severity" value="info" />
                        <property name="allowedAnnotations" value="Override" />
                        <property name="validateThrows" value="false" />
			<property name="scope" value="protected" />
			<property name="allowMissingParamTags" value="false" />
			<property name="allowMissingReturnTag" value="false" />
			<property name="tokens" value="METHOD_DEF, CTOR_DEF" />
		</module>

		<!-- Validates Javadoc comments to help ensure they are well formed. -->
		<!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocStyle -->
		<module name="JavadocStyle">
			<property name="severity" value="info" />
			<property name="scope" value="private" />
			<property name="checkFirstSentence" value="true" />
			<property name="checkEmptyJavadoc" value="false" />
			<property name="checkHtml" value="false" />
			<property name="tokens" value="INTERFACE_DEF, CLASS_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
		</module>

		<!-- Checks Javadoc comments for class and interface definitions. -->
		<!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocType -->
		<module name="JavadocType">
			<property name="severity" value="info" />
			<property name="scope" value="private" />
			<property name="authorFormat" value="" />
			<property name="allowMissingParamTags" value="false" />
			<property name="allowUnknownTags" value="false" />
			<property name="tokens" value="INTERFACE_DEF, CLASS_DEF" />
		</module>

		<module name="JavadocType">
			<property name="severity" value="error" />
			<property name="scope" value="package" />
			<property name="authorFormat" value="\S" />
		</module>

		<!--
			!________________________________________________________________________________________
			!
			!		M E T R I C S
			!________________________________________________________________________________________
			-->

		<!-- Checks cyclomatic complexity against a specified limit. -->
		<!-- See http://checkstyle.sf.net/config_metrics.html -->
		<module name="CyclomaticComplexity">
			<property name="severity" value="ignore" />
			<property name="max" value="10" />
		</module>

		<!--
			!________________________________________________________________________________________
			!
			!		M I S C E L L A N E O U S
			!________________________________________________________________________________________
			-->
		<!-- Checks the style of array type definitions. -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="ArrayTypeStyle">
			<property name="javaStyle" value="true" />
		</module>

		<!-- Check that method/constructor parameters are final. -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="FinalParameters">
			<property name="tokens" value="METHOD_DEF, CTOR_DEF" />
		</module>

		<!-- Checks that the outer type name and the file name match. -->
		<!-- See http://checkstyle.sourceforge.net/config_misc.html#OuterTypeFilename -->
		<module name="OuterTypeFilename" />

		<!-- A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments. -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="TodoComment">
			<property name="format" value="TODO" />
			<property name="severity" value="warning" />
		</module>
		<module name="TodoComment">
			<property name="format" value="FIXME" />
			<property name="severity" value="error" />
		</module>

		<!-- Checks that long constants are defined with an upper ell. That is 'L' and not 'l'. -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="UpperEll" />


		<!--
			!________________________________________________________________________________________
			!
			!		M O D I F I E R S
			!________________________________________________________________________________________
			-->
		<!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification, -->
		<!-- sections 8.1.1, 8.3.1 and 8.4.3. -->
		<!-- See http://checkstyle.sf.net/config_modifiers.html -->
		<module name="ModifierOrder" />

		<!--
			!________________________________________________________________________________________
			!
			!		N A M I N G   C O N V E N T I O N S
			!________________________________________________________________________________________
			-->
		<!-- Checks for abstract class name naming conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<!-- KIEKER removed |^.*Factory$ -->
		<module name="AbstractClassName">
			<property name="format" value="^Abstract.*$" />
			<property name="ignoreModifier" value="false" />
			<property name="ignoreName" value="false" />
		</module>

		<!-- Checks for class type parameter name naming conventions. -->
		<!-- See http://checkstyle.sourceforge.net/config_naming.html#ClassTypeParameterName -->
		<module name="ClassTypeParameterName">
			<property name="format" value="^[A-Z]$" />
		</module>

		<!-- Checks for constant name naming conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="ConstantName">
			<property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$" />
			<property name="applyToPublic" value="true" />
			<property name="applyToProtected" value="true" />
			<property name="applyToPackage" value="true" />
			<property name="applyToPrivate" value="true" />
		</module>

		<!-- Checks for local final variable name naming conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="LocalFinalVariableName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$" />
			<property name="tokens" value="VARIABLE_DEF, PARAMETER_DEF" />
		</module>

		<!-- Checks for local variable name naming conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="LocalVariableName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$" />
			<property name="allowOneCharVarInForLoop" value="true" />
		</module>

		<!-- Checks for member variable name naming conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="MemberName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$" />
			<property name="applyToPublic" value="true" />
			<property name="applyToProtected" value="true" />
			<property name="applyToPackage" value="true" />
			<property name="applyToPrivate" value="true" />
		</module>

		<!-- Checks for method name naming conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="MethodName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$" />
		</module>

		<!-- Checks for method type parameter name naming conventions. -->
		<!-- See http://checkstyle.sourceforge.net/config_naming.html#MethodTypeParameterName -->
		<module name="MethodTypeParameterName">
			<property name="format" value="^[A-Z]$" />
		</module>

		<!-- Checks for package name naming conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="PackageName">
			<property name="format" value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$" />
		</module>

		<!-- Checks for parameter name naming conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="ParameterName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$" />
		</module>

		<!-- Checks for static variable name naming conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="StaticVariableName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$" />
			<property name="applyToPublic" value="true" />
			<property name="applyToProtected" value="true" />
			<property name="applyToPackage" value="true" />
			<property name="applyToPrivate" value="true" />
		</module>

		<!-- Checks for type name naming conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<!-- KIEKER: modded -->
		<module name="TypeName">
			<property name="format" value="^[A-Z][a-zA-Z0-9]*$" />
			<property name="tokens" value="CLASS_DEF" />
			<property name="applyToPublic" value="true" />
			<property name="applyToProtected" value="true" />
			<property name="applyToPackage" value="true" />
			<property name="applyToPrivate" value="true" />
		</module>

		<module name="TypeName">
			<property name="format" value="^I[A-Z][a-zA-Z0-9]*$" />
			<property name="tokens" value="INTERFACE_DEF" />
			<property name="applyToPublic" value="true" />
			<property name="applyToProtected" value="true" />
			<property name="applyToPackage" value="true" />
			<property name="applyToPrivate" value="true" />
		</module>

		<!-- Disallows "Default" in a type name -->
		<!-- Realized by a negative look ahead: "(?!<string>)" -->
		<!-- Means: not ".*Default.*" -->
		<module name="TypeName">
			<property name="format" value="^(?!.*Default).*$" />
			<property name="tokens"
				value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF" />
			<property name="applyToPublic" value="true" />
			<property name="applyToProtected" value="true" />
			<property name="applyToPackage" value="true" />
			<property name="applyToPrivate" value="true" />
		</module>


		<!--
			!________________________________________________________________________________________
			!
			!		S I Z E   V I O L A T I O N S
			!________________________________________________________________________________________
			-->
		<!-- Checks for long anonymous inner classes. -->
		<!-- See http://checkstyle.sf.net/config_sizes.html -->
		<!-- KIEKER Set to 50 instead of 20 -->
		<module name="AnonInnerLength">
			<property name="severity" value="info" />
			<property name="max" value="50" />
		</module>

		<!-- Checks the number of methods declared in each type. This includes the number of each scope -->
		<!-- (private, package, protected and public) as well as an overall total. -->
		<!-- See http://checkstyle.sourceforge.net/config_sizes.html#MethodCount -->
		<module name="MethodCount">
			<property name="severity" value="info" />
			<property name="maxTotal" value="100" />
			<property name="maxPrivate" value="100" />
			<property name="maxPackage" value="100" />
			<property name="maxProtected" value="100" />
			<property name="maxPublic" value="100" />
		</module>

		<!-- Checks for long methods and constructors. -->
		<!-- See http://checkstyle.sf.net/config_sizes.html -->
		<module name="MethodLength">
			<property name="severity" value="info" />
			<property name="max" value="150" />
			<property name="countEmpty" value="true" />
			<property name="tokens" value="METHOD_DEF, CTOR_DEF" />
		</module>

		<!-- Checks for the number of types declared at the outer (or root) level in a file. -->
		<!-- See http://checkstyle.sourceforge.net/config_sizes.html#OuterTypeNumber -->
		<!-- KIEKER 2 -->
		<module name="OuterTypeNumber">
			<property name="max" value="2" />
		</module>


		<!--
			!________________________________________________________________________________________
			!
			!		W H I T E S P A C E
			!________________________________________________________________________________________
			-->
		<!-- Checks the padding of an empty for initializer. -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="EmptyForInitializerPad">
			<property name="option" value="nospace" />
		</module>

		<!-- Checks the padding of an empty for iterator. -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="EmptyForIteratorPad">
			<property name="option" value="nospace" />
		</module>

		<!-- Checks that the whitespace around the Generic tokens < and > is correct to the typical convention. -->
		<!-- See http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace -->
		<module name="GenericWhitespace" />

		<!-- Checks the padding between the identifier of a method definition, -->
		<!-- constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list. -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="MethodParamPad">
			<property name="allowLineBreaks" value="false" />
			<property name="option" value="nospace" />
			<property name="tokens" value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF, SUPER_CTOR_CALL " />
		</module>

		<!-- Checks that there is no whitespace after a token. -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<!-- KIEKER removed ARRAY_INIT -->
		<module name="NoWhitespaceAfter">
			<property name="allowLineBreaks" value="true" />
			<property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
		</module>

		<!-- Checks that there is no whitespace before a token. -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="NoWhitespaceBefore">
			<property name="allowLineBreaks" value="false" />
			<property name="tokens" value="SEMI, POST_DEC, POST_INC" />
		</module>

		<!-- Checks the policy on how to wrap lines on operators. -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="OperatorWrap">
			<property name="option" value="nl" />
			<property name="tokens" value="BAND, BOR, BSR, BXOR, COLON, DIV,
					EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF,
					LOR, LT, MINUS, MOD, NOT_EQUAL,
					PLUS, QUESTION, SL, SR, STAR" />
		</module>

		<!-- Checks the policy on the padding of parentheses. -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="ParenPad">
			<property name="option" value="nospace" />
			<property name="tokens" value="CTOR_CALL, METHOD_CALL, SUPER_CTOR_CALL" />
		</module>

		<!-- Checks the policy on the padding of parentheses for typecasts. -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="TypecastParenPad">
			<property name="option" value="nospace" />
			<property name="tokens" value="TYPECAST, RPAREN" />
		</module>

		<!-- Checks that a token is followed by whitespace. -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="WhitespaceAfter">
			<property name="tokens" value="COMMA, SEMI, TYPECAST" />
		</module>

		<!-- Checks that a token is surrounded by whitespace. -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="WhitespaceAround">
			<property name="tokens"
				value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN,
					BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND,
					LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
					LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
					LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT,
					MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN,
					QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN" />
			<property name="allowEmptyConstructors" value="true" />
			<property name="allowEmptyMethods" value="true" />
		</module>

	</module>

</module>
